// ----------------------------------------------------------------------------
// Below is a demonstration what is NOT AN EXPLOITATION OF THE FICTIONAL 
// VULNERABILITY. Is is also kind of an explanation why the actual challenge
// see README.md did not allow you to make any changes to the code.
//
// Please note, this file was specifically created for someone who I was 
// discussing this CVE with and he still kept saying that the lib is vulnerable.
//
// So, because I'm convinced he's wrong, I decided I will try to reverse engineer 
// his thoughts process to see:
//
//  - why he may think he could exploit an arbitrary code execution vuln in the 
//    library
//  - what he may be missing
//
// What you see being "explained" in the comments later is the only thing I
// I could come up with in terms of what what he may think is the vulnerability.
// ----------------------------------------------------------------------------

import Koa from 'Koa';
import formidable from 'formidable';
const app = new Koa();

const uploadForm = `
<form action="/api/upload" enctype="multipart/form-data" method="post">
<div>File: <input type="file" name="koaFiles" multiple="multiple" /></div>
<input type="submit" value="Upload" />
</form>
`;

app.on('error', (err) => {
  console.error('server error', err);
});

app.use(async (ctx, next) => {
  if (ctx.url === '/api/upload' && ctx.method.toLowerCase() === 'post') {
    const form = formidable({
      uploadDir: './uploads/',
      keepExtensions: true,
    });
    // I started suspecting you may thought that setting e.g. the `filename` 
    // option's value to a template literal, which will get executed, you 
    // achieved arbitrary code execution and the library is vulnerable.
    //
    // So, here it is below.

    form.options.filename = `${console.log('DO YOU THINK THIS IS ARBITRARY CODE EXECUTION? :D')}`;

    // Due to the previous line, once you upload a file, the filename (that is
    // supposed to be a string btw!) is overwritten with a string literal. But, 
    // as you can see, that is not a string, but actual JS code. So yeah, that
    // is going to get executed...
    //
    // However, this is NOT A VULNERABILITY IN THE FORMIDABLE LIBRARY!
    //
    // A regular end user of a web application if created a file with a malicious
    // name, when the file name hits `formidable`, its is going to be A STRING!
    // The whatever you put in the file name, when it hits formidable, will be a
    // STRING and NOT A TEMPLATE LITERAL. NOTHING WILL EVALUATE IT and turn it into
    // a template literal. You'd need something else (either eval, or... check my 
    // blog post again) to first evaluate the string that contains malicious code
    // to be able to get it executed.
    //
    // The end user of a web application will unlikely be able to modify the source 
    // code of the web application to CHEAT and overwrite the `filename` option with
    // a template literal.
    //
    // If you really understand **context** you realize that when you upload a file 
    // using a web form, the file name that this library is going to receive is 
    // always a **string**. Strings will **not be executed** by template literals.
    //
    // So, if you think the above line is a valid "exploit", you are wrong.
    //
    // Here is a challenge for you that will force you to stay within the appropriate context:
    //
    // https://github.com/keymandll/CVE-2022-29622 
    //
    // Just make sure you strictly follow the rules... otherwise, you will never get
    // the context...

    await new Promise((resolve, reject) => {
      form.parse(ctx.req, (err, fields, files) => {
        if (err) {
          reject(err);
          return;
        }

        ctx.set('Content-Type', 'text/plain');
        ctx.status = 200;
        ctx.body = 'All good, your file is with us. Now what?'
        resolve();
      });
    });
    await next();
    return;
  }

  ctx.set('Content-Type', 'text/html');
  ctx.status = 200;
  ctx.body = uploadForm;
});

app.listen(3000, () => {
  console.log('Server listening on http://localhost:3000 ...');
});
